# var_tset.py

# 변수 : 값{data}을 저장하기 위한 메모리(RAM) 내의 기억 장소

# 변수 생성 문법 :
# 변수 = 값

x = 10  # 10 이라는 숫자 값을 x라는 이름의 변수(기억공간)에 저장할 것

# 물리적인 의미의 파이썬 변수
# 파이썬 변수 : 참조변수수
# 값이 저장된 메모리의 위치(메모리 주소)를 가르키는 레퍼런스 변수

# 모든 메모리의 부분은 주소를 갖는다
# 일정한 간격으로 구역이 나누어져 있음
# 나누어진 구역 중 필요한 만큼 부여받아 데이터를 저장

# 변수는 객체를 참조하는 이름표이고 실제 데이터는 객체(이름표가 갖고 있는 주소)안에 저장

# 예제 1

# x라는 변수를 생성하고 10으로 저장할 것
x = 10

# x 변수내의 저장된 값을 화면에 출력하시오
# 화면 출력시에 print() 명령어 사용
print(x)

# x변수의 실제 데이터는 어느 번지에 저장되어 있는지 번지 값을 출력하시오.
print(id(x))

# 파이썬 변수의 특징(다른언어와의 차이점)
# 변수 선언 필요 없음 => 대입연산자만 사용하게 됨

# 변수1의 형태? 정수형 변수
var1 = 10
# 변수2의 형태? 실수형 변수
var2 = 10.0

# 변수3의 형태? 문자열 변수
var3 = "안녕하세요"

# 변수4의 형태? 논리형 변수
var4 = True

# 변수1의 형태? 정수형 변수 => 실수형 변수
var1 = 10.256

# 파이썬변수의 형태는 값을 대입하는 순간에 결정이 되고 변수는 값을 변경할 수 있다

intvar = 10
print(intvar)  # 출력값의 형태? 정수 -> 정수형 변수

intvar = 10.0
print(intvar)  # 출력값의 형태? 정수 -> 실수형 변수

# 파이썬 변수에 저장된 값의 형태를 확인하려면? type()사용
var_t = 523 # 정수형 변수
print(type(var_t)) #var_t 변수의 형태를 확인 후 화면에 출력 <class 'int'>

var_t = "523" # 문자열 변수
print(type(var_t)) #var_t 변수의 형태를 확인 후 화면에 출력 <class 'str'>

# #변수명 : 의미가 있는 변수명을 사용하는 것이 좋음
# 대소문자 구분
# 변수명은 영문자와 숫자, 밑줄(_)로 구성
# 변수명 중간에 공백 허용하지 않음
# 따라서, 구분하기 위해서는 밑줄을 사용하거나 중간에 대문자(낙타체)로 시작
# std_name
# stdName
#
#  student_Name = 10
#  id(x)=10

# 파이썬 예약어는 변수명 또는 파일명, 함수명 등으로 사용할 수 없다
# 파이썬 예약어 확인
import keyword
print(keyword.kwlist) # 파이썬 예약어 리스트 출력
print(len(keyword.kwlist)) # 파이썬 예약어의 갯수를 출력

# 식별자
# 변수, 상수, 함수, 사용자 정의 타입 등에서
# 다른 것과 구분하기 위해 사용되는 이름
# 변수 이름, 상수 이름, 함수 이름, 사용자 정의 타입 이름 등

